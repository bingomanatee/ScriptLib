var _ = require('underscore');
var util = require('util');
var fs = require('fs');
var path = require('path');
var ObjectID = require('mongodb').BSONPure.ObjectID;

/* ***************** CLOSURE ************* */

function Datatable_JSON(data, cols, config) {
    this.cols = cols;
    if (config) {
        _.extend(this, config);
    }
    this._parse_data(data);
}

_.extend(Datatable_JSON.prototype, {
        cols:false,
        object_id:true,
        _data:false,

        stream: function(model, res, count){
            var self = this;
            var query = model.find(this.query(), this.cols);
            var sort =  this.sort();
            console.log('sort: %s', util.inspect(sort));
            query.sort.apply(query, sort)
                .skip(this.skip())
                .limit(this.limit());

            var stream = query.stream();
            res.write(JSON.stringify({sEcho:this.echo(), iTotalRecords:count, aaData:[] }).replace(/\]\}$/, ''));
            var first = true;
            var dis_count = 0;
            stream.on('data', function (doc) {
                ++dis_count;
                if (first) {
                    first = false;
                } else {
                    res.write(',');
                }
                var out = [];

                self.cols.forEach(function (col) {
                    out.push(doc[col]);
                });
                res.write(JSON.stringify(out));
            });

            stream.on('error', function (err) {
                console.log('error in stream: %s', err);
                throw err;
            });

            stream.on('close', function () {
                console.log('closing stream');
                res.write('],');
                res.write(JSON.stringify({iTotalDisplayRecords:count}).replace(/^\{/, ''));
                res.end();
            });

        },

        _parse_data:function (data) {
            _.each(data, function (value, key) {
                if (/^i/.test(key)) {
                    data[key] = parseInt(value);
                } else if (/^b/.test(key)) {
                    data[key] = (value == 'true') ? true : false;
                }
            });
            this._data = data;
        },

        search:function () {
            return {value:this._data.sSearch, regex:this._data.bRegex}
        },

        schema:function () {
            var schema = [];

            this.cols.forEach(function (field, index) {
                var cell = {
                    field:field,
                    searchable:this._data['bSearchable_' + index],
                    regex:this._data['bRegex_' + index]
                };
                schema.push(cell);
            });
            return schema
        },

        limit:function () {
            return this._data.iDisplayLength;
        },

        skip:function () {
            return this._data.iDisplayStart;
        },

        echo: function(){
          return this._data.sEcho;
        },

        sort:function () {
            var sort = [];
            for (var i = 0; i < this._data.iSortingCols; ++i) {
                var dir = (this._data['sSortDir_' + i] == 'asc') ? 1 : -1;
                var sort_desc = [this.cols[this._data['iSortCol_' + i]], dir];
                sort = sort.concat(sort_desc);
            }
            return sort;
        },

        query:function () {
            if (!this._data.sSearch){
                return {};
            }
            var terms = [];
            this.cols.forEach(function (col) {
                if ((this.obj_id) && (col.field == '_id')) {
                    try {
                        match[col.field] = new ObjectID(this.search.value);
                    } catch (err) {
                        return;
                    }
                } else if (col.searchable) {
                    var match = {};
                    if (isNaN(search.value)) {
                        match[col.field] = new RegExp('.*' + this.search.value + '.*');
                    } else {
                        match[col.field] = search.value;
                    }
                    terms.push(match);
                }
            });

            switch (terms.length) {
                case 0:
                    return {};
                    break;

                case 1:
                    return terms[0];
                    break;

                default:
                    return {"$or":terms}
            }
        }
    }
);

/* ***************** MODULE *********** */

module.exports = Datatable_JSON